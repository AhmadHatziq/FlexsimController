package com.nusinfineon.util;

public class FlexScriptDefaultCodes {
    public final static String ONRUNSTOPCODE = "\"/**on run stop*/\\n\\nstring sFunctionName=\\\"OnRunStop\\\";\\n\\n#define VALUE_TIMECODE_SECONDS\\t\\t\\t\\t\\t1\\n#define VALUE_TIMECODE_DATETIME\\t\\t\\t\\t\\t12\\n\\n#define VALUE_TIME_SECONDSPERMINUTE\\t\\t\\t\\t60\\n#define VALUE_TIME_MINUTESPERHOUR\\t\\t\\t\\t60\\n\\n#define MSGTYPE_ERROR\\t\\t\\t\\t\\t\\t\\t1\\n#define MSGTYPE_WARNING\\t\\t\\t\\t\\t\\t\\t2\\n#define MSGTYPE_INFORMATION\\t\\t\\t\\t\\t\\t3\\n#define MSGTYPE_MESSAGE\\t\\t\\t\\t\\t\\t\\t4\\n#define MSGTYPE_TEXT\\t\\t\\t\\t\\t\\t\\t5\\n\\ndouble dTimeNow=time();\\ndouble dStopTime=stoptime(-1);\\nif (dTimeNow >= dStopTime)\\n{\\n\\tdouble dSimulationEndedTime=realtime(VALUE_TIMECODE_SECONDS);\\n\\tdouble dElapsedTimeInSecs=dSimulationEndedTime - gSimulationStartedTime;\\n\\n\\tdouble dElapsedTimeSecs=fmod(dElapsedTimeInSecs, VALUE_TIME_SECONDSPERMINUTE);\\n\\n\\tdouble dElapsedTimeInMins=(dElapsedTimeInSecs - dElapsedTimeSecs) / VALUE_TIME_SECONDSPERMINUTE;\\n\\tdouble dElapsedTimeMins=fmod(dElapsedTimeInMins, VALUE_TIME_MINUTESPERHOUR);\\n\\n\\tdouble dElapsedTimeHours=(dElapsedTimeInMins - dElapsedTimeMins) / VALUE_TIME_MINUTESPERHOUR;\\n\\n\\tstring sElapsedTime=\\\"\\\";\\n\\tif (0 < dElapsedTimeHours)\\n\\t{\\n\\t\\tsElapsedTime=concat(numtostring(dElapsedTimeHours), \\\" hrs \\\");\\n\\t}\\n\\n\\tif (0 < dElapsedTimeMins)\\n\\t{\\n\\t\\tsElapsedTime=concat(sElapsedTime, numtostring(dElapsedTimeMins), \\\" mins \\\");\\n\\t}\\n\\n\\tif (0 < dElapsedTimeSecs)\\n\\t{\\n\\t\\tsElapsedTime=concat(sElapsedTime, numtostring(dElapsedTimeSecs), \\\" secs \\\");\\n\\t}\\n\\n\\tstring sDateTime=realtime(VALUE_TIMECODE_DATETIME);\\n\\tsDateTime=stringreplace(sDateTime, \\\"\\\\n\\\", \\\"\\\");\\n\\n\\tstring sMsg=concat(sDateTime, \\\" Elapsed Time:\\\", sElapsedTime);\\n\\tMessage(MSGTYPE_INFORMATION, \\\"Simulation Ended \\\", sMsg, sFunctionName);\\n\\t\"";
    public final static String TIMEBLOCKCODE = "\"double startTime = get(node(\\\"MAIN:/1/1/1\\\"));\\ndouble stopTime = get(node(\\\"MAIN:/1/1/4\\\"));\\ndouble precision = get(node(\\\"MAIN:/1/8/1/6\\\"));\\nif (!objectexists(node(\\\"/Tools/ModelUnits\\\", model())))\\n\\treturn 0;\\ndouble startT = getmodelunitnum(START_TIME);\\ntreenode currentT = tonode(getmodelunitnum(CURRENT_TIME_NODE));\\n\\n//Convert startTime from model units to seconds\\ndouble multiple = getmodelunitnum(TIME_MULTIPLE);\\ndouble startTimeSecs = startT + startTime * multiple;\\nif (get(currentT) != startTimeSecs) {\\n\\t//We'll update the current time regardless as it can be accessed by other objects in the model\\n\\tset(currentT, startTimeSecs);\\n\\tapplicationcommand(\\\"convertunixtime\\\", tonum(currentT), startTimeSecs);\\n}\\n\\ntreenode modelDateTime = tonode(getmodelunitnum(DATE_TIME_NODE));\\nint useDateTime = get(modelDateTime);\\nif (useDateTime > 0) {\\n\\tif (useDateTime == 1 || time() > stopTime) {\\n\\t\\tsetviewtext(c, getmodelunitstr(CURRENT_TIME));\\n\\t} else {\\n\\t\\tsetviewtext(c, concat(getmodelunitstr(CURRENT_TIME), \\\"   to   \\\", getmodelunitstr(STOP_TIME)));\\n\\t}\\n} else {\\n\\tif (stopTime > 0 && time() <= stopTime) {\\n\\t\\tsetviewtext(c, concat(numtostring(startTime,0,precision), \\\"  to  \\\", numtostring(stopTime,0,precision)));\\n\\t\\tsetprogressbar((startTime/stopTime)*100);\\n\\t} else {\\n\\t\\tsetviewtext(c, numtostring(startTime,0,precision));\\n\\t}\\n}\\nreturn 0;\"";
    public final static String MAIN15CODE = "\"/**write reports and export to excel*/\\nint bExportToExcel=parval(1);\\nstring path=parstr(2);\\nstring excelFile=parstr(3);\\nstring SaveAsExcelFile=parstr(4);\\n\\nstring sFunctionName=\\\"MAIN15WriteReports\\\";\\n\\n#define OBJECT_REFCONTAINER\\t\\t\\t\\t\\t\\t\\\"/__SIMTech\\\"\\n#define TABLE_EXCELEXPORT\\t\\t\\t\\t\\t\\t\\\"__TablesExcelExport\\\"\\n#define STR_EXCELFILE_EXTENSION\\t\\t\\t\\t\\t\\\".xlsx\\\"\\n\\n#define MSGTYPE_ERROR\\t\\t\\t\\t\\t\\t\\t1\\n#define MSGTYPE_WARNING\\t\\t\\t\\t\\t\\t\\t2\\n#define MSGTYPE_INFORMATION\\t\\t\\t\\t\\t\\t3\\n#define MSGTYPE_MESSAGE\\t\\t\\t\\t\\t\\t\\t4\\n#define MSGTYPE_TEXT\\t\\t\\t\\t\\t\\t\\t5\\n\\nint iNumReports=0;\\n\\nMessage(MSGTYPE_MESSAGE, \\\"Writing Reports...\\\", TABLE_EXCELEXPORT, sFunctionName);\\ntreenode refContainer=node(OBJECT_REFCONTAINER, model());\\nif (objectexists(refContainer))\\n{\\n\\ttreenode tableReports=ObjectTableRefByName(refContainer, TABLE_EXCELEXPORT);\\n\\t//treenode tableReports=reftable(TABLE_EXCELEXPORT);\\n\\tif (objectexists(tableReports) && objectexists(refContainer))\\n\\t{\\n\\t\\tif ((true == bExportToExcel) && (false == StringIsEmpty(excelFile)))\\n\\t\\t{\\n\\t\\t\\tstring excelFilePath=concat(path, excelFile);\\n\\t\\t\\tif (fileexists(excelFilePath))\\n\\t\\t\\t{\\n\\t\\t\\t\\tiNumReports=StatisticsWriteReports(gEqptInfo, gOvenInfo, gLocationInfo, gStockerInfo, gBIBASRSInfo,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgResourceSkillAndAvailability, gContainerLoaderKit, gContainerBIB, gContainerTrolley,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgSink, gObjectLookup, gResourceLookup, gStatesMapping, tableReports);\\n\\t\\t\\t\\tif (0 < iNumReports)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t//Message(MSGTYPE_MESSAGE, \\\"Saving Excel File...\\\", excelFilePath, sFunctionName);\\n\\t\\t\\t\\t\\texcellaunch();\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tstring sSaveAsExcelFile=StringTrim(SaveAsExcelFile);\\n\\t\\t\\t\\t\\tif (false == StringIsEmpty(sSaveAsExcelFile))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tstring sSaveAsExcelFilePath=sSaveAsExcelFile;\\n\\t\\t\\t\\t\\t\\tif (0 > stringsearch(sSaveAsExcelFile, \\\"\\\\\\\\\\\", 0))\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tsSaveAsExcelFilePath=concat(path, sSaveAsExcelFilePath);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tif (false == comparetext(excelFilePath, sSaveAsExcelFilePath, true))\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\texcelopen(excelFilePath);\\n\\t\\t\\t\\t\\t\\t\\texcelsave(sSaveAsExcelFilePath); \\n\\t\\t\\t\\t\\t\\t\\texcelclose(false);\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tif (0 >= stringsearch(sSaveAsExcelFilePath, STR_EXCELFILE_EXTENSION, 0))\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tsSaveAsExcelFilePath=concat(sSaveAsExcelFilePath, STR_EXCELFILE_EXTENSION);\\n\\t\\t\\t\\t\\t\\t\\t}\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tint bSuccess=ExcelExportMultiTable(TABLE_EXCELEXPORT, tableReports, sSaveAsExcelFilePath);\\n\\t\\t\\t\\t\\t\\t\\tif (true == bSuccess)\\n\\t\\t\\t\\t\\t\\t\\t{\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\tMessage(MSGTYPE_MESSAGE, \\\"Saving As Excel File...\\\", sSaveAsExcelFilePath, sFunctionName);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\tif (0 >= stringsearch(sSaveAsExcelFilePath, STR_EXCELFILE_EXTENSION, 0))\\n\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsSaveAsExcelFilePath=concat(sSaveAsExcelFilePath, STR_EXCELFILE_EXTENSION);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\tif (fileexists(sSaveAsExcelFilePath))\\n\\t\\t\\t\\t\\t\\t\\t\\t{\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\texcelquit();\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tstring sErrMsg=\\\"Excel file name is reserved!\\\";\\n\\t\\t\\t\\t\\t\\t\\tMessage(MSGTYPE_ERROR, sErrMsg, excelFilePath, sFunctionName);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tstring sMsg=concat(sErrMsg, \\\" \\\", excelFilePath, \\\"\\\\r\\\\nThe file name is reserved. Please use another name\\\");\\n\\t\\t\\t\\t\\t\\t\\tmsg(\\\"Error: File not found\\\", sMsg, 1);\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t//excelquit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tstring sErrMsg=\\\"Excel file is not found!\\\";\\n\\t\\t\\t\\tMessage(MSGTYPE_ERROR, sErrMsg, excelFilePath, sFunctionName);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tstring sMsg=concat(sErrMsg, \\\" \\\", excelFilePath, \\\"\\\\r\\\\nThe file must be present in order to write reports\\\");\\n\\t\\t\\t\\tmsg(\\\"Error: File not found\\\", sMsg, 1);\\n\\t\\t\\t}\\t\\t\\t\\n\\t\\t}\\n\\t}\\n}\\n\\nreturn iNumReports;\"";
}
